buildscript {
    ext.kotlin_version = '1.8.22'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        // START: FlutterFire Configuration
        classpath 'com.google.gms:google-services:4.4.1'
        classpath 'com.google.firebase:perf-plugin:1.4.2'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.9'
        // END: FlutterFire Configuration
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }

     // BEGIN: Forced version overrides for Kotlin and AppCompat to ensure compatibility with AGP 7.4.2 and JDK 17
    // These overrides help prevent crashes during D8/R8 transforms and ensure consistent behavior across modules.
    // To disable, simply comment or remove this block.
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin') {
                details.useVersion '1.8.22'
            }
            if (details.requested.name == 'appcompat') {
                details.useVersion '1.6.1'
            }
        }
    }
    // END: Forced version overrides
}

rootProject.buildDir = '../build'
subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
    project.evaluationDependsOn(':app')

    dependencyLocking {
        ignoredDependencies.add('io.flutter:*')
        lockFile = file("${rootProject.projectDir}/project-${project.name}.lockfile")
        // Temporarily disabling Gradle dependency locking to allow missing dependencies to resolve.
        // This fixes issues with packages not listed in the lockfile (e.g., relinker, lifecycle, startup-runtime).
        // See: https://docs.gradle.org/current/userguide/dependency_locking.html
        // if (!project.hasProperty('local-engine-repo')) {
        //     lockAllConfigurations()
        // }
    }
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
